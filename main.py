#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Task Manager - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta, date
from typing import Optional

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from modules import (
    Task, TaskType, DatabaseManager,
    QuadrantsWidget, TaskListWidget, TaskDetailPanel,
    TaskEditDialog, CalendarWindow,
    get_priority_color, UI_COLORS
)


class TaskManager:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Task Manager")
        self.root.geometry("1200x800")
        self.root.configure(bg=UI_COLORS['background'])

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.db = DatabaseManager()
        self.current_task: Optional[Task] = None
        self.current_date = datetime.now().date()
        self.day_started = False
        self.day_start_time = None

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.load_data()

    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=5, pady=5)

        # –í–∫–ª–∞–¥–∫–∞ Task Manager
        self.task_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.task_frame, text="Task Manager")
        self.setup_task_manager()

        # –í–∫–ª–∞–¥–∫–∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        self.analytics_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.analytics_frame, text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        self.setup_analytics()

        # –ü—É—Å—Ç—ã–µ –≤–∫–ª–∞–¥–∫–∏
        for tab_name in ["–ü–∏—Ç–∞–Ω–∏–µ", "–î–µ–Ω—å–≥–∏", "–ó–¥–æ—Ä–æ–≤—å–µ"]:
            frame = ttk.Frame(self.notebook)
            self.notebook.add(frame, text=tab_name)
            ttk.Label(frame, text=f"–í–∫–ª–∞–¥–∫–∞ {tab_name} - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                      font=('Arial', 14)).pack(expand=True)

        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_hotkeys()

    def setup_task_manager(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.task_frame)
        main_container.pack(fill='both', expand=True, padx=5, pady=5)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.setup_top_panel(main_container)

        # –°—Ä–µ–¥–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.setup_responsive_layout(main_container)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª–µ–π
        self.task_detail_panel = TaskDetailPanel(main_container, self)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.update_datetime()

    def setup_top_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏"""
        top_panel = ttk.Frame(parent)
        top_panel.pack(fill='x', pady=(0, 10))

        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        self.datetime_label = ttk.Label(top_panel, font=('Arial', 12, 'bold'))
        self.datetime_label.pack(side='left')

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.day_btn = ttk.Button(top_panel, text="–ù–∞—á–∞—Ç—å –¥–µ–Ω—å",
                                  command=self.toggle_day_state)
        self.day_btn.pack(side='right', padx=(5, 0))

        self.calendar_btn = ttk.Button(top_panel, text="–ö–∞–ª–µ–Ω–¥–∞—Ä—å",
                                       command=self.show_calendar)
        self.calendar_btn.pack(side='right', padx=(5, 0))

        self.backlog_btn = ttk.Button(top_panel, text="–ë—ç–∫–ª–æ–≥",
                                      command=self.show_backlog)
        self.backlog_btn.pack(side='right', padx=(5, 0))

    def setup_responsive_layout(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ responsive layout"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.layout_container = ttk.Frame(parent)
        self.layout_container.pack(fill='both', expand=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.quadrants_widget = QuadrantsWidget(self.layout_container, self)
        self.task_list_widget = TaskListWidget(self.layout_container, self)

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.root.bind('<Configure>', self.on_window_resize)

    def on_window_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        if event.widget == self.root:
            width = self.root.winfo_width()

            # –ü—Ä–∏ —à–∏—Ä–∏–Ω–µ –º–µ–Ω—å—à–µ 900px –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–¥–∞—á–∏ –ø–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if width < 900:
                self.switch_to_vertical_layout()
            else:
                self.switch_to_horizontal_layout()

    def switch_to_vertical_layout(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É"""
        self.quadrants_widget.main_frame.pack_forget()
        self.task_list_widget.main_frame.pack_forget()

        self.quadrants_widget.main_frame.pack(side='top', fill='both', expand=True)
        self.task_list_widget.main_frame.pack(side='bottom', fill='x', pady=(10, 0))

    def switch_to_horizontal_layout(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É"""
        self.quadrants_widget.main_frame.pack_forget()
        self.task_list_widget.main_frame.pack_forget()

        self.quadrants_widget.main_frame.pack(side='left', fill='both', expand=True, padx=(0, 10))
        self.task_list_widget.main_frame.pack(side='right', fill='y', padx=(10, 0))

    def setup_analytics(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        ttk.Label(self.analytics_frame, text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–¥–∞—á",
                  font=('Arial', 16, 'bold')).pack(pady=10)

        # –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Å –∑–∞–¥–∞—á–∞–º–∏
        self.analytics_tree = ttk.Treeview(self.analytics_frame,
                                           columns=('date', 'completed', 'total_difficulty'),
                                           show='headings')
        self.analytics_tree.heading('date', text='–î–∞—Ç–∞')
        self.analytics_tree.heading('completed', text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á')
        self.analytics_tree.heading('total_difficulty', text='–û–±—â–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å')

        self.analytics_tree.pack(fill='both', expand=True, padx=10, pady=10)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ttk.Button(self.analytics_frame, text="–û–±–Ω–æ–≤–∏—Ç—å",
                   command=self.update_analytics).pack(pady=5)

    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind('<Control-n>', lambda e: self.create_new_task_dialog())
        self.root.bind('<Control-s>', lambda e: self.quick_save_task())
        self.root.bind('<Control-d>', lambda e: self.delete_current_task())
        self.root.bind('<F1>', lambda e: self.show_hotkeys())

    def show_hotkeys(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        hotkey_window = tk.Toplevel(self.root)
        hotkey_window.title("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
        hotkey_window.geometry("400x300")

        hotkeys = [
            ("Ctrl+N", "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
            ("Ctrl+S", "–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"),
            ("Ctrl+D", "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"),
            ("F1", "–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"),
        ]

        for key, description in hotkeys:
            frame = ttk.Frame(hotkey_window)
            frame.pack(fill='x', padx=10, pady=2)
            ttk.Label(frame, text=key, font=('Arial', 10, 'bold')).pack(side='left')
            ttk.Label(frame, text=description).pack(side='left', padx=(20, 0))

    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
    def create_new_task_dialog(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        dialog = TaskEditDialog(self.root, self)
        if dialog.result:
            self.refresh_all()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!")

    def edit_current_task(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏"""
        if not self.current_task:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return

        dialog = TaskEditDialog(self.root, self, self.current_task)
        if dialog.result:
            self.current_task = dialog.result
            self.refresh_all()
            self.task_detail_panel.show_task(self.current_task)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

    def refresh_all(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        self.refresh_task_list()

    def quick_save_task(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏"""
        if self.current_task:
            self.db.save_task(self.current_task)
            self.refresh_all()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    def delete_current_task(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏"""
        if not self.current_task or self.current_task.id == 0:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É '{self.current_task.title}'?"):
            self.db.delete_task(self.current_task.id)
            self.current_task = None
            self.task_detail_panel.show_no_task()
            self.refresh_all()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")

    def refresh_task_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        print(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –¥–∞—Ç—ã: {self.current_date}")

        # –û—á–∏—Å—Ç–∫–∞
        self.task_list_widget.clear_tasks()
        self.quadrants_widget.clear_quadrants()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
        date_str = self.current_date.isoformat()
        tasks = self.db.get_tasks(date_str, include_backlog=False)

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        quadrant_tasks = {0: [], 1: [], 2: [], 3: [], 4: []}
        
        for task in tasks:
            if task.is_completed:
                # Completed tasks –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–ø–∏—Å–∫–µ
                quadrant_tasks[0].append(task)
            quadrant_tasks[task.quadrant].append(task)
            

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ (–∫–≤–∞–¥—Ä–∞–Ω—Ç 0) - —Ä–∞–∑–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        for task in quadrant_tasks[0]:
            self.task_list_widget.add_task(task)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–≤–∞–¥—Ä–∞–Ω—Ç—ã (1-4)
        for quad_id in range(1, 5):
            for task in quadrant_tasks[quad_id]:
                self.quadrants_widget.add_task_to_quadrant(task, quad_id)

    def select_task(self, task: Task):
        """–í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏"""
        self.current_task = task
        self.task_detail_panel.show_task(task)

    def toggle_task_completion(self, task: Task, completed: bool):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        task.is_completed = completed
        self.db.save_task(task)

        if self.current_task and self.current_task.id == task.id:
            self.current_task.is_completed = completed
            self.task_detail_panel.show_task(self.current_task)

        self.refresh_all()

    def move_task_to_quadrant(self, task: Task, quadrant: int):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∫–≤–∞–¥—Ä–∞–Ω—Ç"""
        print(f"üéØ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task.title}' –≤ –∫–≤–∞–¥—Ä–∞–Ω—Ç {quadrant}")

        old_quadrant = task.quadrant
        task.quadrant = quadrant

        if not task.date_scheduled:
            task.date_scheduled = self.current_date.isoformat()

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        if old_quadrant != quadrant and quadrant > 0:
            task.move_count += 1
            task.importance = min(10, task.importance + 1)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏
            task.priority = min(10, max(1, task.importance))

        self.db.save_task(task)
        self.refresh_all()

        if self.current_task and self.current_task.id == task.id:
            self.current_task = task
            self.task_detail_panel.show_task(task)

    def move_task_to_backlog(self, task: Task):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±—ç–∫–ª–æ–≥"""
        print(f"üì§ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±—ç–∫–ª–æ–≥: {task.title}")

        task.date_scheduled = ""
        task.quadrant = 0

        self.db.save_task(task)
        self.refresh_all()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–º
    def start_day(self):
        """–ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è"""
        if not self.day_started:
            self.day_started = True
            self.day_start_time = datetime.now()

            start_hour = self.day_start_time.hour
            start_minute = self.day_start_time.minute
            self.quadrants_widget.update_time_labels(start_hour, start_minute)

            self.day_btn.config(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å")
            messagebox.showinfo("–î–µ–Ω—å –Ω–∞—á–∞—Ç", f"–î–µ–Ω—å –Ω–∞—á–∞—Ç –≤ {self.day_start_time.strftime('%H:%M')}")

    def end_day(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è"""
        if self.day_started:
            if messagebox.askyesno("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å?"):
                self.day_started = False

                end_time = datetime.now().time()
                self.db.save_setting(f"day_end_{self.current_date.isoformat()}", end_time.isoformat())

                self.current_date += timedelta(days=1)

                self.day_btn.config(text="–ù–∞—á–∞—Ç—å –¥–µ–Ω—å")
                self.refresh_all()

                messagebox.showinfo("–î–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω", f"–î–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {end_time.strftime('%H:%M')}")

    def toggle_day_state(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–Ω—è"""
        if self.day_started:
            self.end_day()
        else:
            self.start_day()

    def show_calendar(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
        CalendarWindow(self.root, self.db, self)

    def show_backlog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±—ç–∫–ª–æ–≥"""
        from modules.backlog_window import BacklogWindow
        BacklogWindow(self.root, self.db, self)

    def go_to_date(self, target_date: date):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–µ"""
        self.current_date = target_date
        self.refresh_all()
        self.update_datetime()
        self.task_detail_panel.show_no_task()

        if target_date == date.today():
            msg = "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é"
        elif target_date < date.today():
            msg = f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—à–µ–¥—à–µ–º—É –¥–Ω—é: {target_date.strftime('%d.%m.%Y')}"
        else:
            msg = f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –±—É–¥—É—â–µ–º—É –¥–Ω—é: {target_date.strftime('%d.%m.%Y')}"

        messagebox.showinfo("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–Ω—é", msg)

    def update_analytics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        for item in self.analytics_tree.get_children():
            self.analytics_tree.delete(item)

        all_tasks = self.db.get_tasks()

        days_data = {}
        for task in all_tasks:
            if task.date_scheduled:
                date = task.date_scheduled
                if date not in days_data:
                    days_data[date] = {'completed': 0, 'total_difficulty': 0}

                if task.is_completed:
                    days_data[date]['completed'] += 1
                    days_data[date]['total_difficulty'] += task.importance

        for date, data in sorted(days_data.items(), reverse=True):
            self.analytics_tree.insert('', 'end', values=(
                date,
                data['completed'],
                data['total_difficulty']
            ))

    def update_datetime(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        now = datetime.now()

        weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                  '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']

        weekday = weekdays[self.current_date.weekday()]
        month = months[self.current_date.month - 1]

        date_str = f"{weekday}, {self.current_date.day} {month} {self.current_date.year}"
        time_str = now.strftime("%H:%M:%S")

        if self.current_date == date.today():
            self.datetime_label.config(text=f"{date_str} | {time_str}")
        else:
            self.datetime_label.config(text=f"{date_str} (–ø—Ä–æ—Å–º–æ—Ç—Ä)")

        self.root.after(1000, self.update_datetime)

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        self.refresh_all()
        self.update_analytics()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        app = TaskManager()
        app.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()