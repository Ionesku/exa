# -*- coding: utf-8 -*-
"""
Task Manager - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import tkinter as tk
from tkinter import ttk, messagebox, colorchooser
from typing import List, Optional, Callable
from modules.task_models import Task, TaskType
from modules.colors import get_priority_color, QUADRANT_COLORS, UI_COLORS


class CompactQuadrantsWidget:
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∫–≤–∞–¥—Ä–∞–Ω—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""

    def __init__(self, parent, task_manager):
        self.parent = parent
        self.task_manager = task_manager
        self.quadrants = {}
        self.time_labels = {}
        self.setup_quadrants()

    def setup_quadrants(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–¥—Ä–∞–Ω—Ç–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        self.main_frame = ttk.LabelFrame(self.parent, text="–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.main_frame.pack(side='left', fill='y', padx=(0, 10))

        # –†–∞–∑–º–µ—Ä—ã –∫–≤–∞–¥—Ä–∞–Ω—Ç–æ–≤
        QUAD_SIZE = 140  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä

        # Canvas –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞–Ω—Ç–æ–≤
        canvas = tk.Canvas(self.main_frame, width=QUAD_SIZE * 2 + 40,
                           height=QUAD_SIZE * 2 + 40, bg=UI_COLORS['background'])
        canvas.pack(pady=10, padx=10)

        # –¶–µ–Ω—Ç—Ä –∫–≤–∞–¥—Ä–∞–Ω—Ç–æ–≤
        center_x = QUAD_SIZE + 20
        center_y = QUAD_SIZE + 20

        # –ú–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å–æ–≤–æ–π —Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç)
        time_positions = [
            (center_x, 5, "12:00"),  # –°–≤–µ—Ä—Ö—É
            (QUAD_SIZE * 2 + 35, center_y, "15:00"),  # –°–ø—Ä–∞–≤–∞
            (center_x, QUAD_SIZE * 2 + 35, "18:00"),  # –°–Ω–∏–∑—É
            (5, center_y, "09:00")  # –°–ª–µ–≤–∞
        ]

        for x, y, time_text in time_positions:
            label = tk.Label(canvas, text=time_text, font=('Arial', 9, 'bold'),
                             bg=UI_COLORS['background'])
            canvas.create_window(x, y, window=label)
            self.time_labels[time_text] = label

        # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞–Ω—Ç—ã –∫–∞–∫ –µ–¥–∏–Ω—ã–π –±–ª–æ–∫
        quad_configs = [
            (center_x - QUAD_SIZE // 2, 20, 1, QUADRANT_COLORS[1]),  # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
            (center_x + 5, center_y + 5, 2, QUADRANT_COLORS[2]),  # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
            (20, center_y + 5, 3, QUADRANT_COLORS[3]),  # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
            (20, 20, 4, QUADRANT_COLORS[4])  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
        ]

        for x, y, quad_id, color in quad_configs:
            # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –∫–≤–∞–¥—Ä–∞–Ω—Ç–∞ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –±–ª–æ–∫–∞
            frame = tk.Frame(canvas, bg=color, width=QUAD_SIZE - 5, height=QUAD_SIZE - 5)
            canvas.create_window(x, y, anchor='nw', window=frame)
            frame.pack_propagate(False)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä

            # –ü—Ä–æ—Å—Ç–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞–¥–∞—á –ë–ï–ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            task_area = tk.Frame(frame, bg=color)
            task_area.pack(fill='both', expand=True, padx=5, pady=5)

            self.quadrants[quad_id] = {
                'frame': frame,
                'task_area': task_area,
                'tasks': [],
                'color': color
            }

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drop zone
            self.setup_drop_zone(task_area, quad_id)

    def setup_drop_zone(self, widget, quad_id):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–æ–Ω—ã –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""

        def on_drop(event):
            if self.task_manager.dragged_task:
                self.task_manager.move_task_to_quadrant(
                    self.task_manager.dragged_task, quad_id)

        def on_enter(event):
            widget.config(bg='#E0E0E0')

        def on_leave(event):
            widget.config(bg=self.quadrants[quad_id]['color'])

        widget.bind('<Button-1>', on_drop)
        widget.bind('<Enter>', on_enter)
        widget.bind('<Leave>', on_leave)

    def update_time_labels(self, start_hour: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""
        self.time_labels["09:00"].config(text=f"{start_hour:02d}:00")
        self.time_labels["12:00"].config(text=f"{start_hour + 3:02d}:00")
        self.time_labels["15:00"].config(text=f"{start_hour + 6:02d}:00")
        self.time_labels["18:00"].config(text=f"{start_hour + 9:02d}:00")

    def add_task_to_quadrant(self, task: Task, quadrant: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∫–≤–∞–¥—Ä–∞–Ω—Ç (–∫–æ–º–ø–∞–∫—Ç–Ω–æ, –±–µ–∑ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è)"""
        if quadrant not in self.quadrants:
            return

        task_area = self.quadrants[quadrant]['task_area']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á - –Ω–µ –±–æ–ª—å—à–µ 4-5 –∑–∞–¥–∞—á –Ω–∞ –∫–≤–∞–¥—Ä–∞–Ω—Ç
        if len(self.quadrants[quadrant]['tasks']) >= 4:
            return  # –ù–µ –≤–ª–µ–∑–∞–µ—Ç - –Ω–µ –≤–ª–µ–∑–∞–µ—Ç!

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á–∏
        task_btn = tk.Button(
            task_area,
            text=task.title[:12] + ("..." if len(task.title) > 12 else ""),
            bg=get_priority_color(task.priority),
            fg='white',
            font=('Arial', 8, 'bold'),
            relief='raised',
            bd=1,
            pady=1
        )
        task_btn.pack(fill='x', pady=1)

        # –°–æ–±—ã—Ç–∏—è
        task_btn.bind("<Double-Button-1>", lambda e: self.task_manager.select_task(task))
        self.task_manager.make_task_draggable(task_btn, task)

        # Tooltip
        self.create_tooltip(task_btn, self.get_task_tooltip(task))

        self.quadrants[quadrant]['tasks'].append(task)

    def clear_quadrants(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–≤–∞–¥—Ä–∞–Ω—Ç–æ–≤"""
        for quad_id in self.quadrants:
            task_area = self.quadrants[quad_id]['task_area']
            for widget in task_area.winfo_children():
                widget.destroy()
            self.quadrants[quad_id]['tasks'] = []

    def create_tooltip(self, widget, text):
        """–ü—Ä–æ—Å—Ç–∞—è –≤—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞"""

        def show_tooltip(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root + 10}+{event.y_root + 10}")

            label = tk.Label(tooltip, text=text, background="lightyellow",
                             relief="solid", borderwidth=1, font=('Arial', 9))
            label.pack()

            widget.tooltip = tooltip

        def hide_tooltip(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
                del widget.tooltip

        widget.bind("<Enter>", show_tooltip)
        widget.bind("<Leave>", hide_tooltip)

    def get_task_tooltip(self, task: Task) -> str:
        """–¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        lines = [
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}",
            f"–í–∞–∂–Ω–æ—Å—Ç—å: {task.importance}/10",
            f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}/10"
        ]

        if task.has_duration:
            lines.append(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω")

        return "\n".join(lines)


class TaskListWidget:
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""

    def __init__(self, parent, task_manager):
        self.parent = parent
        self.task_manager = task_manager
        self.setup_task_list()

    def setup_task_list(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        # –§—Ä–µ–π–º —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
        self.main_frame = ttk.LabelFrame(self.parent, text="–ó–∞–¥–∞—á–∏")
        self.main_frame.pack(side='right', fill='both', expand=True)

        # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        ttk.Button(self.main_frame, text="+ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                   command=self.task_manager.create_new_task).pack(
            fill='x', padx=5, pady=(5, 0))

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫
        canvas_frame = ttk.Frame(self.main_frame)
        canvas_frame.pack(fill='both', expand=True, padx=5, pady=5)

        self.canvas = tk.Canvas(canvas_frame, bg='white')
        scrollbar = ttk.Scrollbar(canvas_frame, orient='vertical',
                                  command=self.canvas.yview)

        self.scrollable_frame = ttk.Frame(self.canvas)
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=scrollbar.set)

        self.canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def clear_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

    def add_task_button(self, task: Task):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á–∏"""
        task_frame = ttk.Frame(self.scrollable_frame)
        task_frame.pack(fill='x', pady=1)

        # –ß–µ–∫–±–æ–∫—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        completed_var = tk.BooleanVar(value=task.is_completed)
        ttk.Checkbutton(
            task_frame, variable=completed_var,
            command=lambda: self.task_manager.toggle_task_completion(
                task, completed_var.get())
        ).pack(side='left', padx=(0, 5))

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if task.is_planned:
            plan_label = tk.Label(task_frame, text="üìÖ", font=('Arial', 10))
            plan_label.pack(side='left', padx=(0, 3))

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_text = task.title
        if task.is_completed:
            task_text = f"‚úì {task_text}"

        task_btn = ttk.Button(
            task_frame, text=task_text,
            command=lambda: self.task_manager.select_task(task)
        )
        task_btn.pack(side='left', fill='x', expand=True)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_label = tk.Label(
            task_frame, text="‚óè", font=('Arial', 10),
            fg=get_priority_color(task.priority)
        )
        priority_label.pack(side='right', padx=(5, 0))

        # Drag & drop
        self.task_manager.make_task_draggable(task_btn, task)


class TaskEditPanel:
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á"""

    def __init__(self, parent, task_manager):
        self.parent = parent
        self.task_manager = task_manager
        self.setup_edit_panel()

    def setup_edit_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.main_frame = ttk.LabelFrame(self.parent, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        self.main_frame.pack(fill='x', pady=(10, 0))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.main_frame.grid_columnconfigure(1, weight=1)

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        ttk.Label(self.main_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(
            row=0, column=0, sticky='w', padx=(10, 5), pady=5)
        self.title_var = tk.StringVar()
        self.title_entry = ttk.Entry(self.main_frame, textvariable=self.title_var)
        self.title_entry.grid(row=0, column=1, columnspan=2, sticky='ew',
                              padx=(0, 10), pady=5)

        # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        ttk.Label(self.main_frame, text="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:").grid(
            row=1, column=0, sticky='nw', padx=(10, 5), pady=5)
        self.content_text = tk.Text(self.main_frame, height=3)
        self.content_text.grid(row=1, column=1, columnspan=2, sticky='ew',
                               padx=(0, 10), pady=5)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
        params_frame = ttk.Frame(self.main_frame)
        params_frame.grid(row=2, column=0, columnspan=3, sticky='ew',
                          padx=10, pady=5)

        # –í–∞–∂–Ω–æ—Å—Ç—å
        ttk.Label(params_frame, text="–í–∞–∂–Ω–æ—Å—Ç—å:").pack(side='left', padx=(0, 5))
        self.importance_var = tk.IntVar(value=1)
        ttk.Spinbox(params_frame, from_=1, to=10, textvariable=self.importance_var,
                    width=3).pack(side='left', padx=(0, 15))

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        ttk.Label(params_frame, text="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:").pack(side='left', padx=(0, 5))
        self.priority_var = tk.IntVar(value=5)
        ttk.Spinbox(params_frame, from_=1, to=10, textvariable=self.priority_var,
                    width=3).pack(side='left', padx=(0, 5))
        self.priority_color_label = tk.Label(params_frame, text="‚óè", font=('Arial', 12))
        self.priority_color_label.pack(side='left', padx=(5, 15))

        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.has_duration_var = tk.BooleanVar()
        duration_check = ttk.Checkbutton(params_frame, text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
                                         variable=self.has_duration_var,
                                         command=self.toggle_duration)
        duration_check.pack(side='left', padx=(0, 5))

        self.duration_var = tk.IntVar(value=30)
        self.duration_spin = ttk.Spinbox(params_frame, from_=5, to=480,
                                         textvariable=self.duration_var, width=5,
                                         state='disabled')
        self.duration_spin.pack(side='left', padx=(0, 5))
        ttk.Label(params_frame, text="–º–∏–Ω").pack(side='left', padx=(0, 15))

        # –¢–∏–ø
        ttk.Label(params_frame, text="–¢–∏–ø:").pack(side='left', padx=(0, 5))
        self.task_type_var = tk.StringVar()
        self.task_type_combo = ttk.Combobox(params_frame, textvariable=self.task_type_var,
                                            width=10)
        self.task_type_combo.pack(side='left', padx=(0, 5))
        ttk.Button(params_frame, text="+", width=2,
                   command=self.add_task_type).pack(side='left')

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        planning_frame = ttk.Frame(self.main_frame)
        planning_frame.grid(row=3, column=0, columnspan=3, sticky='ew',
                            padx=10, pady=5)

        ttk.Label(planning_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤:").pack(side='left', padx=(0, 10))
        self.date_var = tk.StringVar(value="–°–µ–≥–æ–¥–Ω—è")
        self.date_combo = ttk.Combobox(planning_frame, textvariable=self.date_var,
                                       values=["–ë—ç–∫–ª–æ–≥", "–°–µ–≥–æ–¥–Ω—è", "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞..."],
                                       state='readonly', width=12)
        self.date_combo.pack(side='left', padx=(0, 10))

        self.custom_date_var = tk.StringVar()
        self.custom_date_entry = ttk.Entry(planning_frame, textvariable=self.custom_date_var,
                                           state='disabled', width=12)
        self.custom_date_entry.pack(side='left')

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(self.main_frame)
        btn_frame.grid(row=4, column=0, columnspan=3, pady=10)

        self.edit_btn = ttk.Button(btn_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                   command=self.task_manager.toggle_edit_mode)
        self.edit_btn.pack(side='left', padx=(0, 5))

        self.save_btn = ttk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                                   command=self.task_manager.save_current_task)
        self.save_btn.pack(side='left', padx=(0, 5))

        self.delete_btn = ttk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å",
                                     command=self.task_manager.delete_current_task)
        self.delete_btn.pack(side='left')

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.priority_var.trace('w', self.update_priority_color)
        self.date_combo.bind('<<ComboboxSelected>>', self.on_date_option_selected)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.set_edit_mode(False)
        self.update_priority_color()

    def toggle_duration(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        state = 'normal' if self.has_duration_var.get() else 'disabled'
        self.duration_spin.config(state=state)

    def update_priority_color(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        try:
            priority = int(self.priority_var.get())
            color = get_priority_color(priority)
            self.priority_color_label.config(fg=color)
        except:
            pass

    def on_date_option_selected(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –¥–∞—Ç—ã"""
        selected = self.date_var.get()
        if selected == "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞...":
            self.custom_date_entry.config(state='normal')
            from datetime import datetime
            today = datetime.now().date()
            self.custom_date_var.set(today.strftime('%d.%m.%Y'))
        else:
            self.custom_date_entry.config(state='disabled')
            self.custom_date_var.set("")

    def add_task_type(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        dialog = TaskTypeDialog(self.parent, self.task_manager.db)
        if dialog.result:
            self.load_task_types()
            self.task_type_var.set(dialog.result.name)

    def load_task_types(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á"""
        task_types = self.task_manager.db.get_task_types()
        type_names = [t.name for t in task_types]
        self.task_type_combo['values'] = type_names

    def set_edit_mode(self, enabled: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        state = 'normal' if enabled else 'disabled'
        self.title_entry.config(state=state)
        self.content_text.config(state=state)

        text = "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" if enabled else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
        self.edit_btn.config(text=text)


class TaskTypeDialog:
    """–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""

    def __init__(self, parent, db_manager):
        self.db = db_manager
        self.result = None

        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–ù–æ–≤—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏")
        self.dialog.geometry("350x250")
        self.dialog.transient(parent)
        self.dialog.grab_set()

        self.setup_ui()
        self.center_window()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ttk.Frame(self.dialog)
        main_frame.pack(fill='both', expand=True, padx=15, pady=15)

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        ttk.Label(main_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").pack(anchor='w', pady=(0, 5))
        self.name_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.name_var).pack(fill='x', pady=(0, 10))

        # –¶–≤–µ—Ç
        color_frame = ttk.Frame(main_frame)
        color_frame.pack(fill='x', pady=(0, 10))

        ttk.Label(color_frame, text="–¶–≤–µ—Ç:").pack(side='left')
        self.color_var = tk.StringVar(value="#2196F3")
        ttk.Entry(color_frame, textvariable=self.color_var, width=8).pack(side='left', padx=(10, 5))

        self.color_preview = tk.Label(color_frame, text="  ", bg=self.color_var.get(),
                                      relief='solid', bd=1)
        self.color_preview.pack(side='left', padx=(0, 5))

        ttk.Button(color_frame, text="–í—ã–±—Ä–∞—Ç—å", command=self.choose_color).pack(side='left')

        # –û–ø–∏—Å–∞–Ω–∏–µ
        ttk.Label(main_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:").pack(anchor='w', pady=(0, 5))
        self.description_text = tk.Text(main_frame, height=3)
        self.description_text.pack(fill='both', expand=True, pady=(0, 10))

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill='x')

        ttk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=self.cancel).pack(side='right')
        ttk.Button(btn_frame, text="–°–æ–∑–¥–∞—Ç—å", command=self.create_type).pack(side='right', padx=(0, 5))

        self.color_var.trace('w', self.update_color_preview)

    def choose_color(self):
        """–í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞"""
        color = colorchooser.askcolor(initialcolor=self.color_var.get())
        if color[1]:
            self.color_var.set(color[1])

    def update_color_preview(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ü–≤–µ—Ç–∞"""
        try:
            self.color_preview.config(bg=self.color_var.get())
        except:
            pass

    def create_type(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∞"""
        if not self.name_var.get().strip():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        task_type = TaskType(
            name=self.name_var.get().strip(),
            color=self.color_var.get(),
            description=self.description_text.get(1.0, tk.END).strip()
        )

        task_type.id = self.db.save_task_type(task_type)
        self.result = task_type
        self.dialog.destroy()

    def cancel(self):
        """–û—Ç–º–µ–Ω–∞"""
        self.dialog.destroy()

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (self.dialog.winfo_width() // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (self.dialog.winfo_height() // 2)
        self.dialog.geometry(f'+{x}+{y}')