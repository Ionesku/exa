# -*- coding: utf-8 -*-
"""
Task Manager - –í–∏–¥–∂–µ—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
"""

import tkinter as tk
from tkinter import ttk, messagebox
from .task_models import Task
from .colors import get_priority_color, get_completed_color


class TaskListWidget:
    """–í–∏–¥–∂–µ—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""

    def __init__(self, parent, task_manager):
        self.parent = parent
        self.task_manager = task_manager
        self.selected_task = None
        self.setup_task_list()
        self.setup_context_menu()

    def setup_context_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.context_menu = tk.Menu(self.task_manager.root, tearoff=0)
        
        # –ü—Ä—è–º—ã–µ –æ–ø—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        self.context_menu.add_command(label="–í –ø–µ—Ä–≤—ã–π –∫–≤–∞–¥—Ä–∞–Ω—Ç", 
                                     command=lambda: self.move_selected_to_quadrant(1))
        self.context_menu.add_command(label="–í–æ –≤—Ç–æ—Ä–æ–π –∫–≤–∞–¥—Ä–∞–Ω—Ç", 
                                     command=lambda: self.move_selected_to_quadrant(2))
        self.context_menu.add_command(label="–í —Ç—Ä–µ—Ç–∏–π –∫–≤–∞–¥—Ä–∞–Ω—Ç", 
                                     command=lambda: self.move_selected_to_quadrant(3))
        self.context_menu.add_command(label="–í —á–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–≤–∞–¥—Ä–∞–Ω—Ç", 
                                     command=lambda: self.move_selected_to_quadrant(4))
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–í –±—ç–∫–ª–æ–≥", 
                                     command=self.move_selected_to_backlog)
        
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_selected_task)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self.delete_selected_task)

    def setup_task_list(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        self.main_frame = ttk.LabelFrame(self.parent, text="–ó–∞–¥–∞—á–∏")
        self.main_frame.pack(side='right', fill='y')

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        self.main_frame.configure(width=280)
        self.main_frame.pack_propagate(False)

        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        ttk.Button(self.main_frame, text="+ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                   command=self.task_manager.create_new_task_dialog).pack(
            fill='x', padx=5, pady=(5, 0))

        # –í–∫–ª–∞–¥–∫–∏
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill='both', expand=True, padx=5, pady=5)

        # –í–∫–ª–∞–¥–∫–∞ "–ê–∫—Ç–∏–≤–Ω—ã–µ"
        self.active_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.active_frame, text="–ê–∫—Ç–∏–≤–Ω—ã–µ")
        self.setup_task_tab(self.active_frame, "active")

        # –í–∫–ª–∞–¥–∫–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"
        self.completed_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.completed_frame, text="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
        self.setup_task_tab(self.completed_frame, "completed")

    def setup_task_tab(self, parent, tab_type):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –∑–∞–¥–∞—á–∞–º–∏"""
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫
        canvas = tk.Canvas(parent, bg='white', width=260)
        scrollbar = ttk.Scrollbar(parent, orient='vertical', command=canvas.yview)

        scrollable_frame = ttk.Frame(canvas)
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        scrollable_window = canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.bind(
            "<Configure>",
            lambda e: canvas.itemconfig(scrollable_window, width=e.width)
        )
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ –∫–ª–∏–∫—É
        canvas.bind('<Button-1>', self.close_context_menu)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
        if tab_type == "active":
            self.active_canvas = canvas
            self.active_scrollable_frame = scrollable_frame
        else:
            self.completed_canvas = canvas
            self.completed_scrollable_frame = scrollable_frame

    def clear_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        for widget in self.active_scrollable_frame.winfo_children():
            widget.destroy()
        for widget in self.completed_scrollable_frame.winfo_children():
            widget.destroy()

    def update_tasks(self, tasks):
        """–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏"""
        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        active_tasks = [t for t in tasks if not t.is_completed]
        completed_tasks = [t for t in tasks if t.is_completed]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self._update_tab_tasks(self.active_scrollable_frame, active_tasks)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self._update_tab_tasks(self.completed_scrollable_frame, completed_tasks)
    
    def _update_tab_tasks(self, parent_frame, tasks):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in parent_frame.winfo_children():
            widget.destroy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        for task in tasks:
            self._create_task_widget(parent_frame, task)
    
    def add_task(self, task: Task):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º
        if task.is_completed:
            parent_frame = self.completed_scrollable_frame
        else:
            parent_frame = self.active_scrollable_frame
        
        self._create_task_widget(parent_frame, task)
    
    def _create_task_widget(self, parent_frame, task: Task):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
        # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
        if task.is_completed:
            bg_color = get_completed_color()
        else:
            bg_color = get_priority_color(task.priority)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–¥–∞—á–∏
        task_frame = tk.Frame(parent_frame,
                             bg=bg_color,
                             relief='solid', bd=1)
        task_frame.pack(fill='x', pady=2)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        main_info_frame = tk.Frame(task_frame, bg=bg_color)
        main_info_frame.pack(fill='x', padx=5, pady=(3, 0))

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if task.is_planned:
            plan_label = tk.Label(main_info_frame, text="üìÖ",
                                 bg=bg_color,
                                 font=('Arial', 8))
            plan_label.pack(side='right', padx=2)

        # –¢–∏–ø –∑–∞–¥–∞—á–∏
        task_types = self.task_manager.db.get_task_types()
        task_type = next((t for t in task_types if t.id == task.task_type_id), None)
        type_name = task_type.name if task_type else "–ë–µ–∑ —Ç–∏–ø–∞"

        # –ù–∞–∑–≤–∞–Ω–∏–µ —Å —Ç–∏–ø–æ–º
        title = f"{type_name} / {task.title}"
        if len(title) > 30:
            title = title[:27] + "..."
        
        if task.is_completed:
            title = f"‚úì {title}"

        title_label = tk.Label(main_info_frame, text=title,
                              bg=bg_color,
                              fg='white', font=('Arial', 9, 'bold'),
                              anchor='w')
        title_label.pack(fill='x')

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = tk.Frame(task_frame, bg=bg_color)
        info_frame.pack(fill='x', padx=5, pady=(0, 3))

        info_parts = []
        info_parts.append(f"–í:{task.importance}")
        info_parts.append(f"–°:{task.priority}")
        if task.has_duration:
            info_parts.append(f"–î:{task.duration}–º")
        
        info_text = " | ".join(info_parts)
        
        info_label = tk.Label(info_frame, text=info_text,
                             bg=bg_color,
                             fg='white', font=('Arial', 8),
                             anchor='w')
        info_label.pack(fill='x')

        # –°–æ–±—ã—Ç–∏—è
        for widget in [task_frame, main_info_frame, title_label, info_frame, info_label]:
            widget.bind("<Button-1>", lambda e, t=task: self.select_task(t))
            widget.bind("<Button-3>", lambda e, t=task: self.show_context_menu(e, t))

    def close_context_menu(self, event=None):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            self.context_menu.unpost()
        except:
            pass

    def select_task(self, task: Task):
        """–í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏"""
        self.selected_task = task
        self.task_manager.select_task(task)

    def show_context_menu(self, event, task: Task):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        self.selected_task = task
        self.task_manager.select_task(task)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ –ª—é–±–æ–º—É –∫–ª–∏–∫—É
        self.task_manager.root.bind_all('<Button-1>', self.close_context_menu)
        
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()

    def move_selected_to_quadrant(self, quadrant: int):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ –∫–≤–∞–¥—Ä–∞–Ω—Ç"""
        if self.selected_task:
            self.task_manager.move_task_to_quadrant(self.selected_task, quadrant)

    def move_selected_to_backlog(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ –±—ç–∫–ª–æ–≥"""
        if self.selected_task:
            self.task_manager.move_task_to_backlog(self.selected_task)

    def edit_selected_task(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        if self.selected_task:
            self.task_manager.current_task = self.selected_task
            self.task_manager.edit_current_task()

    def delete_selected_task(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        if not self.selected_task:
            return

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É '{self.selected_task.title}'?"):
            self.task_manager.db.delete_task(self.selected_task.id)
            self.task_manager.refresh_task_list()